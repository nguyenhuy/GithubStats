<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSString+TKCategory.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSString(TKCategory)</TokenIdentifier>
			<Abstract type="html">Additional functionality for NSString.</Abstract>
			<DeclaredIn>NSString+TKCategory.h</DeclaredIn>
			
			<NodeRef refid="39"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(TKCategory)/isEmail</TokenIdentifier>
			<Abstract type="html">Returns YES if a string is a valid email address, otherwise NO.</Abstract>
			<DeclaredIn>NSString+TKCategory.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isEmail</Declaration>
			
			<ReturnValue><Abstract type="html">True if the string is formatted properly as an email address.</Abstract></ReturnValue>
			<Anchor>//api/name/isEmail</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(TKCategory)/URLEncode</TokenIdentifier>
			<Abstract type="html">Returns a NSString that is URL friendly.</Abstract>
			<DeclaredIn>NSString+TKCategory.h</DeclaredIn>			
			
			<Declaration>- (NSString *)URLEncode</Declaration>
			
			<ReturnValue><Abstract type="html">A URL encoded string.</Abstract></ReturnValue>
			<Anchor>//api/name/URLEncode</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(TKCategory)/escapeHTML</TokenIdentifier>
			<Abstract type="html">Returns a NSString that properly replaces HTML specific character sequences.</Abstract>
			<DeclaredIn>NSString+TKCategory.h</DeclaredIn>			
			
			<Declaration>- (NSString *)escapeHTML</Declaration>
			
			<ReturnValue><Abstract type="html">An escaped HTML string.</Abstract></ReturnValue>
			<Anchor>//api/name/escapeHTML</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(TKCategory)/unescapeHTML</TokenIdentifier>
			<Abstract type="html">Returns a NSString that properly formats text for HTML.</Abstract>
			<DeclaredIn>NSString+TKCategory.h</DeclaredIn>			
			
			<Declaration>- (NSString *)unescapeHTML</Declaration>
			
			<ReturnValue><Abstract type="html">An unescaped HTML string.</Abstract></ReturnValue>
			<Anchor>//api/name/unescapeHTML</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(TKCategory)/stringByRemovingHTML</TokenIdentifier>
			<Abstract type="html">Returns a NSString that removes HTML elements.</Abstract>
			<DeclaredIn>NSString+TKCategory.h</DeclaredIn>			
			
			<Declaration>- (NSString *)stringByRemovingHTML</Declaration>
			
			<ReturnValue><Abstract type="html">Returns a string without the HTML elements.</Abstract></ReturnValue>
			<Anchor>//api/name/stringByRemovingHTML</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(TKCategory)/md5sum</TokenIdentifier>
			<Abstract type="html">Returns an MD5 string of from the given NSString.</Abstract>
			<DeclaredIn>NSString+TKCategory.h</DeclaredIn>			
			
			<Declaration>- (NSString *)md5sum</Declaration>
			
			<ReturnValue><Abstract type="html">A MD5 string.</Abstract></ReturnValue>
			<Anchor>//api/name/md5sum</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(TKCategory)/hasString:</TokenIdentifier>
			<Abstract type="html">Returns YES is a string has the substring, otherwise NO.</Abstract>
			<DeclaredIn>NSString+TKCategory.h</DeclaredIn>			
			
			<Declaration>- (BOOL)hasString:(NSString *)substring</Declaration>
			<Parameters>
				<Parameter>
					<Name>substring</Name>
					<Abstract type="html">The substring.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the substring is contained in the string, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/hasString:</Anchor>
		</Token>
		
	</File>
</Tokens>