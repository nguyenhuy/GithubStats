<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/TKCoverflowView.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/TKCoverflowView</TokenIdentifier>
			<Abstract type="html">TKCoverflowView imitates the coverflow you’d find in the iPod/Music app on the iPhone OS. Coverflow displays TKCoverflowCoverView objects. This view functions similar to the UITableView where covers that are off screen aren’t loaded until need. Thus, similar to the tableview, you can dequeue a cover view and hand it back to Coverflow View using the data source.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>
			
			<NodeRef refid="11"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/initWithFrame:deleclerationRate:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>- (id)initWithFrame:(CGRect)frame deleclerationRate:(CGFloat)decelerationRate</Declaration>
			
			
			<Anchor>//api/name/initWithFrame:deleclerationRate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/setLeftTransform:</TokenIdentifier>
			<Abstract type="html">The transform applied to covers left of the center cover.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CATransform3D leftTransform</Declaration>
			
			
			<Anchor>//api/name/leftTransform</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKCoverflowView/leftTransform</TokenIdentifier>
			<Abstract type="html">The transform applied to covers left of the center cover.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CATransform3D leftTransform</Declaration>
			
			
			<Anchor>//api/name/leftTransform</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/setRightTransform:</TokenIdentifier>
			<Abstract type="html">The transform applied to covers right of the center cover.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CATransform3D rightTransform</Declaration>
			
			
			<Anchor>//api/name/rightTransform</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKCoverflowView/rightTransform</TokenIdentifier>
			<Abstract type="html">The transform applied to covers right of the center cover.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CATransform3D rightTransform</Declaration>
			
			
			<Anchor>//api/name/rightTransform</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/setLeftIncrementalDistanceFromCenter:</TokenIdentifier>
			<Abstract type="html">The spacing between cover views</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat leftIncrementalDistanceFromCenter</Declaration>
			
			
			<Anchor>//api/name/leftIncrementalDistanceFromCenter</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKCoverflowView/leftIncrementalDistanceFromCenter</TokenIdentifier>
			<Abstract type="html">The spacing between cover views</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat leftIncrementalDistanceFromCenter</Declaration>
			
			
			<Anchor>//api/name/leftIncrementalDistanceFromCenter</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/setRightIncrementalDistanceFromCenter:</TokenIdentifier>
			<Abstract type="html">The spacing between cover views</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat rightIncrementalDistanceFromCenter</Declaration>
			
			
			<Anchor>//api/name/rightIncrementalDistanceFromCenter</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKCoverflowView/rightIncrementalDistanceFromCenter</TokenIdentifier>
			<Abstract type="html">The spacing between cover views</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat rightIncrementalDistanceFromCenter</Declaration>
			
			
			<Anchor>//api/name/rightIncrementalDistanceFromCenter</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/setSpacing:</TokenIdentifier>
			<Abstract type="html">The spacing between cover views</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat spacing</Declaration>
			
			
			<Anchor>//api/name/spacing</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKCoverflowView/spacing</TokenIdentifier>
			<Abstract type="html">The spacing between cover views</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat spacing</Declaration>
			
			
			<Anchor>//api/name/spacing</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/setCoverSize:</TokenIdentifier>
			<Abstract type="html">Coversize is used to center the cover view in the view. This doesn’t have to be the exact size of the TKCoverflowView objects hand through the data source. The default is (224,224).</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGSize coverSize</Declaration>
			
			
			<Anchor>//api/name/coverSize</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKCoverflowView/coverSize</TokenIdentifier>
			<Abstract type="html">Coversize is used to center the cover view in the view. This doesn’t have to be the exact size of the TKCoverflowView objects hand through the data source. The default is (224,224).</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGSize coverSize</Declaration>
			
			
			<Anchor>//api/name/coverSize</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/setCoverflowDataSource:</TokenIdentifier>
			<Abstract type="html">The data source must adopt the TKCoverflowViewDataSource protocol. The data source is not retained.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) id&lt;TKCoverflowViewDataSource&gt; coverflowDataSource</Declaration>
			
			
			<Anchor>//api/name/coverflowDataSource</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKCoverflowView/coverflowDataSource</TokenIdentifier>
			<Abstract type="html">The data source must adopt the TKCoverflowViewDataSource protocol. The data source is not retained.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) id&lt;TKCoverflowViewDataSource&gt; coverflowDataSource</Declaration>
			
			
			<Anchor>//api/name/coverflowDataSource</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/setCoverflowDelegate:</TokenIdentifier>
			<Abstract type="html">The delegate must adopt the TKCoverflowViewDelegate protocol. The delegate is not retained.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) id&lt;TKCoverflowViewDelegate&gt; coverflowDelegate</Declaration>
			
			
			<Anchor>//api/name/coverflowDelegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKCoverflowView/coverflowDelegate</TokenIdentifier>
			<Abstract type="html">The delegate must adopt the TKCoverflowViewDelegate protocol. The delegate is not retained.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) id&lt;TKCoverflowViewDelegate&gt; coverflowDelegate</Declaration>
			
			
			<Anchor>//api/name/coverflowDelegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/setCurrentCoverIndex:</TokenIdentifier>
			<Abstract type="html">The currently centered cover.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) NSInteger currentCoverIndex</Declaration>
			
			
			<Anchor>//api/name/currentCoverIndex</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKCoverflowView/currentCoverIndex</TokenIdentifier>
			<Abstract type="html">The currently centered cover.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) NSInteger currentCoverIndex</Declaration>
			
			
			<Anchor>//api/name/currentCoverIndex</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/setCurrentCoverAtIndex:animated:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>- (void)setCurrentCoverAtIndex:(NSInteger)index animated:(BOOL)animated</Declaration>
			
			
			<Anchor>//api/name/setCurrentCoverAtIndex:animated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/dequeueReusableCoverView</TokenIdentifier>
			<Abstract type="html">Returns an usued coverflow view. If there are no reusable views, it will return nil.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>- (TKCoverflowCoverView *)dequeueReusableCoverView</Declaration>
			
			
			<Anchor>//api/name/dequeueReusableCoverView</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/coverAtIndex:</TokenIdentifier>
			<Abstract type="html">Returns the cover object corresponding to that index.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>- (TKCoverflowCoverView *)coverAtIndex:(NSInteger)index</Declaration>
			<Parameters>
				<Parameter>
					<Name>index</Name>
					<Abstract type="html">Index of the cover object.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The cover object at the index. If the cover is outside the visible range, it will return nil.</Abstract></ReturnValue>
			<Anchor>//api/name/coverAtIndex:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/visibleRange</TokenIdentifier>
			<Abstract type="html">Returns the range covers on screen.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>- (NSRange)visibleRange</Declaration>
			
			<ReturnValue><Abstract type="html">A range of visible covers.</Abstract></ReturnValue>
			<Anchor>//api/name/visibleRange</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/reloadData</TokenIdentifier>
			<Abstract type="html">Reloads the cover views of the receiver.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>- (void)reloadData</Declaration>
			
			
			<Anchor>//api/name/reloadData</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKCoverflowView/visibleCovers</TokenIdentifier>
			<Abstract type="html">Returns the visible covers on screen.</Abstract>
			<DeclaredIn>TKCoverflowView.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)visibleCovers</Declaration>
			
			<ReturnValue><Abstract type="html">An array of visible covers.</Abstract></ReturnValue>
			<Anchor>//api/name/visibleCovers</Anchor>
		</Token>
		
	</File>
</Tokens>